#!/usr/bin/env node
import{createRequire as e}from"module";var o={253:(e,o,t)=>{const n=t(896);const r=t(928);const s=t(857);const i=t(982);const a=t(583);const c=a.version;const l=["🔐 encrypt with dotenvx: https://dotenvx.com","🔐 prevent committing .env to code: https://dotenvx.com/precommit","🔐 prevent building .env in docker: https://dotenvx.com/prebuild","🛠️  run anywhere with `dotenvx run -- yourcommand`","⚙️  specify custom .env file path with { path: '/custom/path/.env' }","⚙️  enable debug logging with { debug: true }","⚙️  override existing env vars with { override: true }","⚙️  suppress all logs with { quiet: true }","⚙️  write to custom object with { processEnv: myObject }","⚙️  load multiple .env files with { path: ['.env.local', '.env'] }"];function _getRandomTip(){return l[Math.floor(Math.random()*l.length)]}function supportsAnsi(){return process.stdout.isTTY}function dim(e){return supportsAnsi()?`[2m${e}[0m`:e}const p=/(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/gm;function parse(e){const o={};let t=e.toString();t=t.replace(/\r\n?/gm,"\n");let n;while((n=p.exec(t))!=null){const e=n[1];let t=n[2]||"";t=t.trim();const r=t[0];t=t.replace(/^(['"`])([\s\S]*)\1$/gm,"$2");if(r==='"'){t=t.replace(/\\n/g,"\n");t=t.replace(/\\r/g,"\r")}o[e]=t}return o}function _parseVault(e){e=e||{};const o=_vaultPath(e);e.path=o;const t=u.configDotenv(e);if(!t.parsed){const e=new Error(`MISSING_DATA: Cannot parse ${o} for an unknown reason`);e.code="MISSING_DATA";throw e}const n=_dotenvKey(e).split(",");const r=n.length;let s;for(let e=0;e<r;e++){try{const o=n[e].trim();const r=_instructions(t,o);s=u.decrypt(r.ciphertext,r.key);break}catch(o){if(e+1>=r){throw o}}}return u.parse(s)}function _warn(e){console.error(`[dotenv@${c}][WARN] ${e}`)}function _debug(e){console.log(`[dotenv@${c}][DEBUG] ${e}`)}function _log(e){console.log(`[dotenv@${c}] ${e}`)}function _dotenvKey(e){if(e&&e.DOTENV_KEY&&e.DOTENV_KEY.length>0){return e.DOTENV_KEY}if(process.env.DOTENV_KEY&&process.env.DOTENV_KEY.length>0){return process.env.DOTENV_KEY}return""}function _instructions(e,o){let t;try{t=new URL(o)}catch(e){if(e.code==="ERR_INVALID_URL"){const e=new Error("INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development");e.code="INVALID_DOTENV_KEY";throw e}throw e}const n=t.password;if(!n){const e=new Error("INVALID_DOTENV_KEY: Missing key part");e.code="INVALID_DOTENV_KEY";throw e}const r=t.searchParams.get("environment");if(!r){const e=new Error("INVALID_DOTENV_KEY: Missing environment part");e.code="INVALID_DOTENV_KEY";throw e}const s=`DOTENV_VAULT_${r.toUpperCase()}`;const i=e.parsed[s];if(!i){const e=new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${s} in your .env.vault file.`);e.code="NOT_FOUND_DOTENV_ENVIRONMENT";throw e}return{ciphertext:i,key:n}}function _vaultPath(e){let o=null;if(e&&e.path&&e.path.length>0){if(Array.isArray(e.path)){for(const t of e.path){if(n.existsSync(t)){o=t.endsWith(".vault")?t:`${t}.vault`}}}else{o=e.path.endsWith(".vault")?e.path:`${e.path}.vault`}}else{o=r.resolve(process.cwd(),".env.vault")}if(n.existsSync(o)){return o}return null}function _resolveHome(e){return e[0]==="~"?r.join(s.homedir(),e.slice(1)):e}function _configVault(e){const o=Boolean(e&&e.debug);const t=Boolean(e&&e.quiet);if(o||!t){_log("Loading env from encrypted .env.vault")}const n=u._parseVault(e);let r=process.env;if(e&&e.processEnv!=null){r=e.processEnv}u.populate(r,n,e);return{parsed:n}}function configDotenv(e){const o=r.resolve(process.cwd(),".env");let t="utf8";const s=Boolean(e&&e.debug);const i=Boolean(e&&e.quiet);if(e&&e.encoding){t=e.encoding}else{if(s){_debug("No encoding is specified. UTF-8 is used by default")}}let a=[o];if(e&&e.path){if(!Array.isArray(e.path)){a=[_resolveHome(e.path)]}else{a=[];for(const o of e.path){a.push(_resolveHome(o))}}}let c;const l={};for(const o of a){try{const r=u.parse(n.readFileSync(o,{encoding:t}));u.populate(l,r,e)}catch(e){if(s){_debug(`Failed to load ${o} ${e.message}`)}c=e}}let p=process.env;if(e&&e.processEnv!=null){p=e.processEnv}const _=u.populate(p,l,e);if(s||!i){const e=Object.keys(_).length;const o=[];for(const e of a){try{const t=r.relative(process.cwd(),e);o.push(t)}catch(o){if(s){_debug(`Failed to load ${e} ${o.message}`)}c=o}}_log(`injecting env (${e}) from ${o.join(",")} ${dim(`(tip: ${_getRandomTip()})`)}`)}if(c){return{parsed:l,error:c}}else{return{parsed:l}}}function config(e){if(_dotenvKey(e).length===0){return u.configDotenv(e)}const o=_vaultPath(e);if(!o){_warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${o}. Did you forget to build it?`);return u.configDotenv(e)}return u._configVault(e)}function decrypt(e,o){const t=Buffer.from(o.slice(-64),"hex");let n=Buffer.from(e,"base64");const r=n.subarray(0,12);const s=n.subarray(-16);n=n.subarray(12,-16);try{const e=i.createDecipheriv("aes-256-gcm",t,r);e.setAuthTag(s);return`${e.update(n)}${e.final()}`}catch(e){const o=e instanceof RangeError;const t=e.message==="Invalid key length";const n=e.message==="Unsupported state or unable to authenticate data";if(o||t){const e=new Error("INVALID_DOTENV_KEY: It must be 64 characters long (or more)");e.code="INVALID_DOTENV_KEY";throw e}else if(n){const e=new Error("DECRYPTION_FAILED: Please check your DOTENV_KEY");e.code="DECRYPTION_FAILED";throw e}else{throw e}}}function populate(e,o,t={}){const n=Boolean(t&&t.debug);const r=Boolean(t&&t.override);const s={};if(typeof o!=="object"){const e=new Error("OBJECT_REQUIRED: Please check the processEnv argument being passed to populate");e.code="OBJECT_REQUIRED";throw e}for(const t of Object.keys(o)){if(Object.prototype.hasOwnProperty.call(e,t)){if(r===true){e[t]=o[t];s[t]=o[t]}if(n){if(r===true){_debug(`"${t}" is already defined and WAS overwritten`)}else{_debug(`"${t}" is already defined and was NOT overwritten`)}}}else{e[t]=o[t];s[t]=o[t]}}return s}const u={configDotenv:configDotenv,_configVault:_configVault,_parseVault:_parseVault,config:config,decrypt:decrypt,parse:parse,populate:populate};e.exports.configDotenv=u.configDotenv;e.exports._configVault=u._configVault;e.exports._parseVault=u._parseVault;e.exports.config=u.config;e.exports.decrypt=u.decrypt;e.exports.parse=u.parse;e.exports.populate=u.populate;e.exports=u},317:o=>{o.exports=e(import.meta.url)("child_process")},982:o=>{o.exports=e(import.meta.url)("crypto")},434:o=>{o.exports=e(import.meta.url)("events")},896:o=>{o.exports=e(import.meta.url)("fs")},857:o=>{o.exports=e(import.meta.url)("os")},928:o=>{o.exports=e(import.meta.url)("path")},785:o=>{o.exports=e(import.meta.url)("readline")},16:o=>{o.exports=e(import.meta.url)("url")},583:e=>{e.exports=JSON.parse('{"name":"dotenv","version":"17.1.0","description":"Loads environment variables from .env file","main":"lib/main.js","types":"lib/main.d.ts","exports":{".":{"types":"./lib/main.d.ts","require":"./lib/main.js","default":"./lib/main.js"},"./config":"./config.js","./config.js":"./config.js","./lib/env-options":"./lib/env-options.js","./lib/env-options.js":"./lib/env-options.js","./lib/cli-options":"./lib/cli-options.js","./lib/cli-options.js":"./lib/cli-options.js","./package.json":"./package.json"},"scripts":{"dts-check":"tsc --project tests/types/tsconfig.json","lint":"standard","pretest":"npm run lint && npm run dts-check","test":"tap run --allow-empty-coverage --disable-coverage --timeout=60000","test:coverage":"tap run --show-full-coverage --timeout=60000 --coverage-report=text --coverage-report=lcov","prerelease":"npm test","release":"standard-version"},"repository":{"type":"git","url":"git://github.com/motdotla/dotenv.git"},"homepage":"https://github.com/motdotla/dotenv#readme","funding":"https://dotenvx.com","keywords":["dotenv","env",".env","environment","variables","config","settings"],"readmeFilename":"README.md","license":"BSD-2-Clause","devDependencies":{"@types/node":"^18.11.3","decache":"^4.6.2","sinon":"^14.0.1","standard":"^17.0.0","standard-version":"^9.5.0","tap":"^19.2.0","typescript":"^4.8.4"},"engines":{"node":">=12"},"browser":{"fs":false}}')}};var t={};function __nccwpck_require__(e){var n=t[e];if(n!==undefined){return n.exports}var r=t[e]={exports:{}};var s=true;try{o[e](r,r.exports,__nccwpck_require__);s=false}finally{if(s)delete t[e]}return r.exports}__nccwpck_require__.m=o;(()=>{__nccwpck_require__.d=(e,o)=>{for(var t in o){if(__nccwpck_require__.o(o,t)&&!__nccwpck_require__.o(e,t)){Object.defineProperty(e,t,{enumerable:true,get:o[t]})}}}})();(()=>{__nccwpck_require__.f={};__nccwpck_require__.e=e=>Promise.all(Object.keys(__nccwpck_require__.f).reduce(((o,t)=>{__nccwpck_require__.f[t](e,o);return o}),[]))})();(()=>{__nccwpck_require__.u=e=>""+e+".index.js"})();(()=>{__nccwpck_require__.o=(e,o)=>Object.prototype.hasOwnProperty.call(e,o)})();(()=>{__nccwpck_require__.r=e=>{if(typeof Symbol!=="undefined"&&Symbol.toStringTag){Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}Object.defineProperty(e,"__esModule",{value:true})}})();if(typeof __nccwpck_require__!=="undefined")__nccwpck_require__.ab=new URL(".",import.meta.url).pathname.slice(import.meta.url.match(/^file:\/\/\/\w:/)?1:0,-1)+"/";(()=>{var e={792:0};var installChunk=o=>{var{ids:t,modules:n,runtime:r}=o;var s,i,a=0;for(s in n){if(__nccwpck_require__.o(n,s)){__nccwpck_require__.m[s]=n[s]}}if(r)r(__nccwpck_require__);for(;a<t.length;a++){i=t[a];if(__nccwpck_require__.o(e,i)&&e[i]){e[i][0]()}e[t[a]]=0}};__nccwpck_require__.f.j=(o,t)=>{var n=__nccwpck_require__.o(e,o)?e[o]:undefined;if(n!==0){if(n){t.push(n[1])}else{if(true){var r=import("./"+__nccwpck_require__.u(o)).then(installChunk,(t=>{if(e[o]!==0)e[o]=undefined;throw t}));var r=Promise.race([r,new Promise((t=>n=e[o]=[t]))]);t.push(n[1]=r)}}}}})();var n={};var r=__nccwpck_require__(253);var s=__nccwpck_require__(896);var i=__nccwpck_require__(928);r.config();async function testClaudeCodeIntegration(){try{console.log("🧪 Testing @anthropic-ai/claude-code integration...");const e=await __nccwpck_require__.e(170).then(__nccwpck_require__.bind(__nccwpck_require__,170));console.log("✅ Successfully imported @anthropic-ai/claude-code");console.log("📦 Module keys:",Object.keys(e));console.log("📦 Module type:",typeof e);if(e.default){console.log("✅ Default export available:",typeof e.default)}for(const[o,t]of Object.entries(e)){console.log(`   ${o}: ${typeof t}`)}}catch(e){console.error("❌ Failed to import @anthropic-ai/claude-code:",e.message);try{const e=(0,i.join)(process.cwd(),"node_modules","@anthropic-ai","claude-code");if((0,s.existsSync)(e)){console.log("📁 Claude Code package found in node_modules");const o=(0,i.join)(e,"package.json");if((0,s.existsSync)(o)){const e=JSON.parse((0,s.readFileSync)(o,"utf8"));console.log("📋 Package version:",e.version);console.log("📋 Main entry:",e.main);console.log("📋 Exports:",e.exports);console.log("📋 Type:",e.type)}}else{console.log("❌ Claude Code package not found in node_modules")}}catch(e){console.log("🔍 Could not check filesystem:",e.message)}}}async function main(){console.log("🚀 Starting Claude Code Bundle Test...");console.log("📍 Node.js version:",process.version);console.log("📍 Working directory:",process.cwd());console.log("📍 Environment: bundled =",true||0);await testClaudeCodeIntegration();console.log("✅ Bundle test completed")}process.on("SIGINT",(()=>{console.log("\n👋 Shutting down...");process.exit(0)}));main().catch((e=>{console.error("❌ Bundle test failed:",e);process.exit(1)}));